#include<iostream>

/* Проектирование проекта
* 1. Определить абстракцию (набор чего-то), которая определяет суть нашей программы
* Карточная игра представляет из себя набор правил, должны быть игроки (кол-во, игра заканчивается, когда остаётся один игрок
или продолжается до последнего игрока), должны быть карты (класс), игровой стол (место, где всё происходит).

* 2. Надо ответить на вопросы: что такое игровой стол, кто такие игроки, что такое игровой стол. Т.е. проработать правила.
* Колода - набор карт без повторяющихся элементов. Кол-во?
* Карта - объект класса, поля: масть, достоинство.
 
* 3. Условия выйгрыша и условия пройгрыша, кол-во игроков. Условия завершения партии. Вес каждой карты. 
Правила раскладки карт (распределения между игроками). Правила очерёдности ходов. Что такое ход (правила ходов)?
Продумать исключительной ситуации, как они будут сделаны.

4. Игрок - название, у которого есть набор карт (с точки зрения игры): игрок, имя, набор карт, баланс

5. Игровой стол: места для игроков, не разыгранная колода, отбой, размещение карт текущего хода на столе

6. Надо продумать два интерфейса: один с видимыми картами, другой с картами скрытыми

7. Класс действия хода (правила хода) - метки, приёмы/передачи карт.

8. Правила - это класс.

9. Как всем этим будут пользоваться. Интерфейс класса заказываются пользователем. Св-ва колоды - можно раздать, перетусовать, раздать карты, 
добавить/удалить из колоды карту. Колода - это vector карт.

10. Активный класс - это класс игры (крупье, кто опрашивает игроков), пассивный класс - это игрок. Класс игра - это УПРАВЛЯЮЩИЙ ПРОЦЕСС.
Крупье определяет и разрешает, как классы взаимодействуют друг с другом. Игрок не может быть управляющим, т.к. не должен иметь ответственности, 
выходящей за его сферу деятельности. Если игрок будет управляющим, то класс игрока раздуется до супер-класса.

11. Какие взаимодействия ожидаются от игрока другими игроками (сколько у тебя карт, для определения возможности подкидывания). Игрок должен 
предоставлять эту инф-ию в систему (геттеры и сетторы). Служебные методы: получить ход...

12. Класс "Ход", объект которого абстрактно описывает событие "ход" (как игроки понимают, что надо ходить, что меняется). Ход - порядок операций,
которые игроки могут сделать (положить, перевести, подкинуть). Общение игрока с игрой путём парой значений. Методы для получения пары из 
списка действий и предложенной игроку карты и возврата пары из действия и выбранной игроком карты.

13. Методы (действия):
	13.1. Регистрация игроков (замену сущ-ого на другого игрока);
	13.2. Установка правил (Класс "Правила"):
		13.2.1. Получить (сформировать) стартовую колоду
		13.2.2. Правила учёта игрока (можно или нельзя добавлять нового игрока)
		13.2.3. Выполнение хода (как выполняется текущий ход)
		13.2.4. Проводить инициализацию игрового стола
	13.3. Сообщать название игры, номер хода (общая инф-я об игре)	

14. Класс "Игровой стол": текущая игровая ситуация (карты на столе, отбой, неразыгранная колода). Стол должен сообщать о кол-ве карт оппонентов.
Рамещение игроков, информация о размещённых игроках. В остальном стол - это чисто информационная штука.

15. Класс "Колода" - продумать названия поведений, которые уместные в карточной среде, чтобы сделать обёртку у vectora

16. Класс "Игрок" - методы доступа и изменения полей. Карты в руке - это коллекция карт, можно сделать, как обёртку для vector'a, или как
коллекцию карт с доступом, похожим на колоду.

17. В ходе выполнения хода будем манипулировать объектом "Игра". 
*/

#include"Card.hpp" // Карта
#include"Deck.hpp" // Колода
#include"Action.hpp" // Действия внутри хода
#include"Player.hpp" // Игрок
#include"Controller.hpp" // Способ управления действиями игрока
#include"Game.hpp" // Игра

int main() {

	return 0;
}
